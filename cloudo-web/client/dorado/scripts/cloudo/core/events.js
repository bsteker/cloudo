// Generated by CoffeeScript 1.6.2
(function() {
  var EventTarget, core;

  core = $namespace("cloudo.core");

  EventTarget = (function() {
    function EventTarget() {
      this._namedListeners = {};
    }

    EventTarget.prototype._namedListeners = null;

    EventTarget.prototype.dispatchEvent = function(event) {
      var listeners, _fire;
      if (event.type == null) {
        throw new Error('event["type"] expected.');
      }
      _fire = function(event, listener) {
        var error;
        try {
          if (typeof listener === "function") {
            return listener(event);
          } else {
            return listener.handleEvent(event);
          }
        } catch (_error) {
          error = _error;
          if (typeof console !== "undefined" && console !== null) {
            return console.log(error);
          }
        }
      };
      listeners = this._namedListeners[event.type];
      if (listeners != null) {
        return listeners.forEach(function(listener) {
          return _fire(event, listener);
        });
      }
    };

    EventTarget.prototype.addEventListener = function(eventName, listener) {
      var _base, _ref;
      if (typeof listener === "function" || (listener.handleEvent != null)) {
        if ((_ref = (_base = this._namedListeners)[eventName]) == null) {
          _base[eventName] = [];
        }
        this._namedListeners[eventName].push(listener);
      }
    };

    EventTarget.prototype.removeEventListener = function(eventName, listener) {
      var i, listeners;
      listeners = this._namedListeners[eventName];
      if (listeners != null) {
        i = listeners.indexOf(listener);
        if (i >= 0) {
          if (listeners.length === 1) {
            delete this._namedListeners[eventName];
          } else {
            listeners.splice(i, 1);
          }
        }
      }
    };

    return EventTarget;

  })();

  EventTarget.attach = function(obj) {
    var eventTarget;
    eventTarget = new EventTarget;
    obj.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);
    obj.addEventListener = eventTarget.addEventListener.bind(eventTarget);
    obj.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);
  };

  core.EventTarget = EventTarget;

}).call(this);
